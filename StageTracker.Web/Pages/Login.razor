@page "/login"

<div class="d-grid justify-content-center mt-5">
    <h3 class="d-flex justify-content-center">Login</h3>

    <EditForm Model="@loginDto" OnSubmit="@CheckLogin" class="form-control">
        <DataAnnotationsValidator />

        <div>
            <label form="login">Email:</label>
            <InputText @bind-Value="loginDto.Email" class="form-control" placeholder="jode@exemple.com" />
            <span class="text-danger">
                <ValidationMessage For="@(() => loginDto.Email)"/>
            </span>
        </div>

        <div>
            <label>Mot de passe:</label>
            <InputText @bind-Value="loginDto.Password" class="form-control" placeholder="mot de passe" />
            <span class="text-danger">
                <ValidationMessage For="@(() => loginDto.Password)" />
            </span>
        </div>
        
        <button class="form-control mt-3" type="submit">Se connecter</button>

        @if (!accountExist)
        {
            <span class="text-danger">
                Identifiant de compte ou mot de passe non valide
            </span>
        }
        
    </EditForm>
</div>

@code {
    private LoginDto loginDto = new();
    private bool accountExist = true;

    protected override async Task OnParametersSetAsync()
    {
        await LocalStorage.RemoveItemAsync("expired_at");
    }

    private async void CheckLogin()
    {
        // dev login
        if (loginDto.Email == "student@student.com" && loginDto.Password == "student")
        {
            Console.WriteLine("Login successful for student.");

            await LocalStorage.SetItemAsStringAsync("email", loginDto.Email);
            await LocalStorage.SetItemAsync("role", Shared.Enum.ERoles.STUDENT);
            await LocalStorage.SetItemAsync("expired_at", DateTime.Now.AddMinutes(30));
        }
        else if (loginDto.Email == "company@company.com" && loginDto.Password == "company")
        {
            Console.WriteLine("Login successful for student.");

            await LocalStorage.SetItemAsync("email", loginDto.Email);
            await LocalStorage.SetItemAsync("role", Shared.Enum.ERoles.COMPANY);
            await LocalStorage.SetItemAsync("expired_at", DateTime.Now.AddMinutes(30));
        }
        else
        {
            accountExist = false;
            return;
        }

        Navigation.NavigateTo("/");
    }
}
